## =====================================
## CÁC LOẠI DỮ LIỆU
## =====================================

type Author {
    id: ID!
    name: String!
    birthYear: Int
    nationality: String
    books: [Book!]!
}

input AuthorInput {
    name: String!
    birthYear: Int
    nationality: String
}

input AuthorSearchInput {
    keyword: String
    nationality: String
    birthYear: Int
}

type Book {
    id: ID!
    title: String!
    publishedYear: Int
    price: Float
    quantity: Int
    author: Author
}

input BookInput {
    title: String!
    publishedYear: Int
    price: Float
    quantity: Int
}
input BookSearchInput {
    title: String
    publishedYear: Int
    minPrice: Float
    maxPrice: Float
    minQuantity: Int
    maxQuantity: Int
}

input RegisterInput {
    username: String!
    password: String!
    role: String!
}

input LoginInput {
    username: String!
    password: String!
}

type AuthPayload {
    token: String!
}
enum Role {
    ADMIN
    STAFF
    READER
}



## =====================================
## CÁC TRUY VẤN (QUERIES)
## =====================================

type Query {
    getAllAuthors: [Author!]!
    getAuthorById(id: ID!): Author
    searchAuthors(filter: AuthorSearchInput): [Author!]!
    getAllBooks: [Book!]!
    getBookById(id: ID!): Book
    searchBooks(filter: BookSearchInput): [Book!]!
}

## =====================================
## CÁC HÀNH ĐỘNG (MUTATIONS)
## =====================================

type Mutation {
    addAuthor(input: AuthorInput!): Author!
    updateAuthor(id: ID!, input: AuthorInput!): Author!
    deleteAuthor(id: ID!): Boolean!

    addBook(authorId: ID!, input: BookInput!): Book!
    updateBook(id: ID!, authorId: ID, input: BookInput!): Book!
    deleteBook(id: ID!): Boolean!

    register(input: RegisterInput!): Boolean!
    login(input: LoginInput!): AuthPayload!
}
type AuthorPage {
    content: [Author!]!
    totalElements: Int!
    totalPages: Int!
    number: Int!
    size: Int!
}

type BookPage {
    content: [Book!]!
    totalElements: Int!
    totalPages: Int!
    number: Int!
    size: Int!
}
extend type Query {
    getAuthorsByPage(filter: AuthorSearchInput, page: Int!, size: Int!): AuthorPage!
    getBooksByPage(filter: BookSearchInput, page: Int!, size: Int!): BookPage!
}
